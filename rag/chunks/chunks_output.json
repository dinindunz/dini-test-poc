[
  {
    "content": "@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}",
    "full_content_with_imports": "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}",
    "type": "class",
    "file_type": "java",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/java/com/example/hello/world/Application.java",
    "package": "com.example.hello.world",
    "class_name": "Application",
    "layer": "other",
    "imports": [
      "org.springframework.boot.SpringApplication",
      "org.springframework.boot.autoconfigure.SpringBootApplication"
    ],
    "annotations": [],
    "line_start": 6,
    "line_end": 12,
    "chunk_id": "01_dini_java17-quickstart-helloworld_0",
    "char_count": 159
  },
  {
    "content": "@Slf4j\n@Repository\npublic class SampleRepository {\n\n    public SampleResponse getHelloWorld() {\n        log.debug(\"Fetching hello world message\");\n        return new SampleResponse(\"Hello World!\");\n    }\n}",
    "full_content_with_imports": "import com.example.hello.world.api.SampleResponse;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Repository;\n\n@Slf4j\n@Repository\npublic class SampleRepository {\n\n    public SampleResponse getHelloWorld() {\n        log.debug(\"Fetching hello world message\");\n        return new SampleResponse(\"Hello World!\");\n    }\n}",
    "type": "class",
    "file_type": "java",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/java/com/example/hello/world/repository/sample/SampleRepository.java",
    "package": "com.example.hello.world.repository.sample",
    "class_name": "SampleRepository",
    "layer": "repository",
    "imports": [
      "com.example.hello.world.api.SampleResponse",
      "lombok.extern.slf4j.Slf4j",
      "org.springframework.stereotype.Repository"
    ],
    "annotations": [],
    "line_start": 7,
    "line_end": 15,
    "chunk_id": "01_dini_java17-quickstart-helloworld_1",
    "char_count": 205
  },
  {
    "content": "@Slf4j\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/api/hello\")\npublic class SampleController {\n\n    private final SampleService sampleService;\n\n    @GetMapping\n    public SampleResponse getHelloWorld() {\n        log.info(\"Received request for hello world\");\n        return sampleService.getHelloWorld();\n    }\n}",
    "full_content_with_imports": "import com.example.hello.world.api.SampleResponse;\nimport com.example.hello.world.application.SampleService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Slf4j\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/api/hello\")\npublic class SampleController {\n\n    private final SampleService sampleService;\n\n    @GetMapping\n    public SampleResponse getHelloWorld() {\n        log.info(\"Received request for hello world\");\n        return sampleService.getHelloWorld();\n    }\n}",
    "type": "class",
    "file_type": "java",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/java/com/example/hello/world/controller/SampleController.java",
    "package": "com.example.hello.world.controller",
    "class_name": "SampleController",
    "layer": "controller",
    "imports": [
      "com.example.hello.world.api.SampleResponse",
      "com.example.hello.world.application.SampleService",
      "lombok.RequiredArgsConstructor",
      "lombok.extern.slf4j.Slf4j",
      "org.springframework.web.bind.annotation.GetMapping",
      "org.springframework.web.bind.annotation.RequestMapping",
      "org.springframework.web.bind.annotation.RestController"
    ],
    "annotations": [],
    "line_start": 11,
    "line_end": 24,
    "chunk_id": "01_dini_java17-quickstart-helloworld_2",
    "char_count": 326
  },
  {
    "content": "@JsonInclude(JsonInclude.Include.NON_NULL)\npublic record SampleResponse(String message) {\n\n    public SampleResponse() {\n        this(null);\n    }\n}",
    "full_content_with_imports": "import com.fasterxml.jackson.annotation.JsonInclude;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic record SampleResponse(String message) {\n\n    public SampleResponse() {\n        this(null);\n    }\n}",
    "type": "record",
    "file_type": "java",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/java/com/example/hello/world/api/SampleResponse.java",
    "package": "com.example.hello.world.api",
    "class_name": "SampleResponse",
    "layer": "other",
    "imports": [
      "com.fasterxml.jackson.annotation.JsonInclude"
    ],
    "annotations": [],
    "line_start": 5,
    "line_end": 11,
    "chunk_id": "01_dini_java17-quickstart-helloworld_3",
    "char_count": 148
  },
  {
    "content": "@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class SampleService {\n\n    private final SampleRepository sampleRepository;\n\n    public SampleResponse getHelloWorld() {\n        return sampleRepository.getHelloWorld();\n    }\n}",
    "full_content_with_imports": "import com.example.hello.world.api.SampleResponse;\nimport com.example.hello.world.repository.sample.SampleRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class SampleService {\n\n    private final SampleRepository sampleRepository;\n\n    public SampleResponse getHelloWorld() {\n        return sampleRepository.getHelloWorld();\n    }\n}",
    "type": "class",
    "file_type": "java",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/java/com/example/hello/world/application/SampleService.java",
    "package": "com.example.hello.world.application",
    "class_name": "SampleService",
    "layer": "other",
    "imports": [
      "com.example.hello.world.api.SampleResponse",
      "com.example.hello.world.repository.sample.SampleRepository",
      "lombok.RequiredArgsConstructor",
      "lombok.extern.slf4j.Slf4j",
      "org.springframework.stereotype.Service"
    ],
    "annotations": [],
    "line_start": 9,
    "line_end": 19,
    "chunk_id": "01_dini_java17-quickstart-helloworld_4",
    "char_count": 225
  },
  {
    "content": "info:\n  description: A simple Hello World quickstart application demonstrating RESTful API\n    design\n  title: Hello World API\n  version: 1.0.0\n",
    "type": "api_info",
    "file_type": "swagger",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/api/api.swagger.yaml",
    "api_title": "Hello World API",
    "api_version": "1.0.0",
    "description": "A simple Hello World quickstart application demonstrating RESTful API design",
    "chunk_id": "01_dini_java17-quickstart-helloworld_5",
    "char_count": 144
  },
  {
    "content": "method: get\noperation:\n  description: Returns a simple \"Hello World\" message\n  operationId: getHelloWorld\n  responses:\n    200:\n      description: Successful response with hello world message\n      schema:\n        $ref: '#/definitions/SampleResponse'\n    500:\n      description: Internal server error\n      schema:\n        $ref: '#/definitions/ErrorResponse'\n  summary: Get Hello World message\n  tags:\n  - Hello\npath: /hello\nschemas:\n  ErrorResponse:\n    properties:\n      error:\n        description: Error message\n        type: string\n      timestamp:\n        description: Time when error occurred\n        format: date-time\n        type: string\n    type: object\n  SampleResponse:\n    properties:\n      message:\n        description: The hello world message\n        example: Hello World!\n        type: string\n    required:\n    - message\n    type: object\n",
    "type": "api_endpoint",
    "file_type": "swagger",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/api/api.swagger.yaml",
    "http_method": "GET",
    "api_path": "/hello",
    "operation_id": "getHelloWorld",
    "summary": "Get Hello World message",
    "description": "Returns a simple \"Hello World\" message",
    "tags": [
      "Hello"
    ],
    "parameters": [],
    "request_body": false,
    "responses": [
      200,
      500
    ],
    "chunk_id": "01_dini_java17-quickstart-helloworld_6",
    "char_count": 853
  },
  {
    "content": "SampleResponse:\n  properties:\n    message:\n      description: The hello world message\n      example: Hello World!\n      type: string\n  required:\n  - message\n  type: object\n",
    "type": "api_schema",
    "file_type": "swagger",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/api/api.swagger.yaml",
    "schema_name": "SampleResponse",
    "properties": [
      "message"
    ],
    "required_fields": [
      "message"
    ],
    "chunk_id": "01_dini_java17-quickstart-helloworld_7",
    "char_count": 172
  },
  {
    "content": "ErrorResponse:\n  properties:\n    error:\n      description: Error message\n      type: string\n    timestamp:\n      description: Time when error occurred\n      format: date-time\n      type: string\n  type: object\n",
    "type": "api_schema",
    "file_type": "swagger",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/src/main/api/api.swagger.yaml",
    "schema_name": "ErrorResponse",
    "properties": [
      "error",
      "timestamp"
    ],
    "required_fields": [],
    "chunk_id": "01_dini_java17-quickstart-helloworld_8",
    "char_count": 209
  },
  {
    "content": "# Hello World Quickstart\n\nA simple Spring Boot quickstart application demonstrating RESTful API development with a clean layered architecture.\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Hello World Quickstart",
    "heading_level": 1,
    "section_index": 0,
    "contains_code": false,
    "word_count": 20,
    "chunk_id": "01_dini_java17-quickstart-helloworld_9",
    "char_count": 149
  },
  {
    "content": "## What you will build\n\nThis quickstart provides the basics of building a Spring Boot application. The key topics covered include:\n\n- Starting the application and sending your first request\n- The simple architecture that makes up all applications: Controllers, Services & Repositories\n- How to package the application\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "What you will build",
    "heading_level": 2,
    "section_index": 1,
    "contains_code": false,
    "word_count": 50,
    "chunk_id": "01_dini_java17-quickstart-helloworld_10",
    "char_count": 324
  },
  {
    "content": "## What you will learn\n\nThis quickstart will provide the basics of building a Spring Boot application.\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "What you will learn",
    "heading_level": 2,
    "section_index": 2,
    "contains_code": false,
    "word_count": 17,
    "chunk_id": "01_dini_java17-quickstart-helloworld_11",
    "char_count": 104
  },
  {
    "content": "### How to get the most out of this quickstart\n\nThe sections below describe the best pathway for using this quickstart depending on your situation.\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "How to get the most out of this quickstart",
    "heading_level": 3,
    "section_index": 3,
    "contains_code": false,
    "word_count": 25,
    "chunk_id": "01_dini_java17-quickstart-helloworld_12",
    "char_count": 149
  },
  {
    "content": "#### I am starting from scratch, I need to build a Spring Boot application with the HelloWorld template\n\nThis quickstart will accompany you through the steps of getting a Spring Boot application using the HelloWorld quickstart running locally on your machine. From here, you will need to ensure your machine configuration meets the prerequisites. The next step is to configure your machine by following the Building and Running your application instructions. Use the instructions and guidance in this lab to explore the codebase and understand the implementation.\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "I am starting from scratch, I need to build a Spring Boot application with the HelloWorld template",
    "heading_level": 4,
    "section_index": 4,
    "contains_code": false,
    "word_count": 88,
    "chunk_id": "01_dini_java17-quickstart-helloworld_13",
    "char_count": 570
  },
  {
    "content": "## Prerequisites\n\nTo complete this sample app, you need:\n\n- Less than 10 mins\n- Java 17 installed with JAVA_HOME configured\n- An IDE (IntelliJ IDEA, Eclipse, VS Code, etc.)\n- Maven or Gradle installed\n- Docker installed (if running with containers)\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Prerequisites",
    "heading_level": 2,
    "section_index": 5,
    "contains_code": false,
    "word_count": 42,
    "chunk_id": "01_dini_java17-quickstart-helloworld_14",
    "char_count": 250
  },
  {
    "content": "### Verify that you have all the tools installed\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Verify that you have all the tools installed",
    "heading_level": 3,
    "section_index": 6,
    "contains_code": false,
    "word_count": 9,
    "chunk_id": "01_dini_java17-quickstart-helloworld_15",
    "char_count": 50
  },
  {
    "content": "#### Java\n\n```bash\njava -version\n```\n\nExpected output: Java version 17.x.x\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Java",
    "heading_level": 4,
    "section_index": 7,
    "contains_code": true,
    "word_count": 12,
    "chunk_id": "01_dini_java17-quickstart-helloworld_16",
    "char_count": 81
  },
  {
    "content": "## Getting Started - Quickstart Lab\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Getting Started - Quickstart Lab",
    "heading_level": 2,
    "section_index": 8,
    "contains_code": false,
    "word_count": 6,
    "chunk_id": "01_dini_java17-quickstart-helloworld_17",
    "char_count": 37
  },
  {
    "content": "### Quickstart Setup\n\nThis section details the configuration for the quickstart HelloWorld Template.\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Quickstart Setup",
    "heading_level": 3,
    "section_index": 9,
    "contains_code": false,
    "word_count": 13,
    "chunk_id": "01_dini_java17-quickstart-helloworld_18",
    "char_count": 102
  },
  {
    "content": "#### API Interface (Swagger)\n\nService interfaces are defined using Swagger. Refer to the [Swagger documentation](https://swagger.io/) to know more about Swagger.\n\nRefer to the swagger file for this sample application: [api.swagger.yaml](src/main/java/com/example/hello/world/api/api.swagger.yaml)\n\nThe Hello service exposes a simple HTTP GET endpoint:\n\n**Endpoint**: `GET /api/hello`\n\n**Response**:\n```json\n{\n  \"message\": \"Hello World!\"\n}\n```\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "API Interface (Swagger)",
    "heading_level": 4,
    "section_index": 10,
    "contains_code": true,
    "word_count": 51,
    "chunk_id": "01_dini_java17-quickstart-helloworld_19",
    "char_count": 449
  },
  {
    "content": "## Building and Running\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Building and Running",
    "heading_level": 2,
    "section_index": 11,
    "contains_code": false,
    "word_count": 4,
    "chunk_id": "01_dini_java17-quickstart-helloworld_20",
    "char_count": 25
  },
  {
    "content": "### Build the application\n\n```bash\nmvn clean install\n```\n\nOr with Gradle:\n\n```bash\ngradle build\n```\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Build the application",
    "heading_level": 3,
    "section_index": 12,
    "contains_code": true,
    "word_count": 16,
    "chunk_id": "01_dini_java17-quickstart-helloworld_21",
    "char_count": 101
  },
  {
    "content": "### Run the application\n\n```bash\nmvn spring-boot:run\n```\n\nOr with Gradle:\n\n```bash\ngradle bootRun\n```\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Run the application",
    "heading_level": 3,
    "section_index": 13,
    "contains_code": true,
    "word_count": 15,
    "chunk_id": "01_dini_java17-quickstart-helloworld_22",
    "char_count": 103
  },
  {
    "content": "### Test the endpoint\n\n```bash\ncurl http://localhost:8080/api/hello\n```\n\nExpected response:\n```json\n{\n  \"message\": \"Hello World!\"\n}\n```\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Test the endpoint",
    "heading_level": 3,
    "section_index": 14,
    "contains_code": true,
    "word_count": 18,
    "chunk_id": "01_dini_java17-quickstart-helloworld_23",
    "char_count": 142
  },
  {
    "content": "## Project Structure\n\n```\nsrc/main/java/com/example/hello/world/\n├── api/                    # API definitions and DTOs\n│   ├── SampleResponse.java\n│   └── api.swagger.yaml\n├── application/            # Business logic layer\n│   └── SampleService.java\n├── controller/             # REST controllers\n│   └── SampleController.java\n├── repository/             # Data access layer\n│   └── sample/\n│       └── SampleRepository.java\n└── Application.java        # Main Spring Boot application\n```\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Project Structure",
    "heading_level": 2,
    "section_index": 15,
    "contains_code": true,
    "word_count": 56,
    "chunk_id": "01_dini_java17-quickstart-helloworld_24",
    "char_count": 495
  },
  {
    "content": "## Architecture\n\nThis application follows a clean layered architecture:\n\n1. **Controller Layer**: Handles HTTP requests and responses\n2. **Application/Service Layer**: Contains business logic\n3. **Repository Layer**: Manages data access and persistence\n4. **API Layer**: Defines DTOs and contracts\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Architecture",
    "heading_level": 2,
    "section_index": 16,
    "contains_code": false,
    "word_count": 39,
    "chunk_id": "01_dini_java17-quickstart-helloworld_25",
    "char_count": 304
  },
  {
    "content": "## Next Steps\n\n- Add database integration\n- Implement additional REST endpoints\n- Add unit and integration tests\n- Configure application properties\n- Add logging and monitoring\n- Set up CI/CD pipeline\n\n---\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "Next Steps",
    "heading_level": 2,
    "section_index": 17,
    "contains_code": false,
    "word_count": 33,
    "chunk_id": "01_dini_java17-quickstart-helloworld_26",
    "char_count": 207
  },
  {
    "content": "## References\n\n- [Spring Boot Documentation](https://spring.io/projects/spring-boot)\n- [Spring Web MVC](https://docs.spring.io/spring-framework/reference/web/webmvc.html)\n- [Swagger/OpenAPI](https://swagger.io/)\n\n",
    "type": "documentation",
    "file_type": "markdown",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/README.md",
    "document_name": "README",
    "heading": "References",
    "heading_level": 2,
    "section_index": 18,
    "contains_code": false,
    "word_count": 12,
    "chunk_id": "01_dini_java17-quickstart-helloworld_27",
    "char_count": 213
  },
  {
    "content": "buildscript {\n    ext {\n        springBootVersion = \"3.2.0\"\n    }\n    repositories {\n        mavenCentral()\n        mavenLocal()\n    }\n    dependencies {\n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\")\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\ngroup = 'com.example'\nversion = '1.0.0'\n\njava {\n    sourceCompatibility = '17'\n    targetCompatibility = '17'\n}\n\nrepositories {\n    mavenCentral()\n    mavenLocal()\n}\n\ndependencies {\n    // Lombok for reducing boilerplate code\n    compileOnly('org.projectlombok:lombok')\n    annotationProcessor('org.projectlombok:lombok')\n\n    // Spring Boot starters\n    implementation('org.springframework.boot:spring-boot-starter-web')\n    implementation('org.springframework.boot:spring-boot-starter-actuator')\n\n    // Jackson for JSON processing\n    implementation('com.fasterxml.jackson.core:jackson-databind')\n\n    // Resilience4j for fault tolerance\n    implementation('io.github.resilience4j:resilience4j-spring-boot3')\n\n    // SLF4J for logging\n    implementation('org.slf4j:slf4j-api')\n\n    // Testing dependencies\n    testImplementation('org.springframework.boot:spring-boot-starter-test')\n    testImplementation('org.junit.jupiter:junit-jupiter')\n    testImplementation('org.mockito:mockito-core')\n\n    // Test Lombok\n    testCompileOnly('org.projectlombok:lombok')\n    testAnnotationProcessor('org.projectlombok:lombok')\n}\n\nconfigurations {\n    compileClasspath {\n        resolutionStrategy.activateDependencyLocking()\n    }\n    runtimeClasspath {\n        resolutionStrategy.activateDependencyLocking()\n    }\n}\n\ntasks.named('test') {\n    useJUnitPlatform()\n}\n\nbootJar {\n    archiveBaseName = 'quickstart-helloworld'\n    archiveVersion = version\n}\n",
    "type": "build_config_full",
    "file_type": "gradle",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/build.gradle",
    "java_version": "17",
    "spring_boot_version": "",
    "dependencies_count": 7,
    "chunk_id": "01_dini_java17-quickstart-helloworld_28",
    "char_count": 1811
  },
  {
    "content": "dependencies {\n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
    "type": "dependencies",
    "file_type": "gradle",
    "module": "01_dini_java17-quickstart-helloworld",
    "file_path": "01_dini_java17-quickstart-helloworld/build.gradle",
    "dependency_list": [],
    "chunk_id": "01_dini_java17-quickstart-helloworld_29",
    "char_count": 105
  }
]