buildscript {
    ext {
        springBootVersion = "3.2.0"
    }
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '1.0.0'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Lombok for reducing boilerplate code
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')

    // Spring Boot starters
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-actuator')

    // Jackson for JSON processing
    implementation('com.fasterxml.jackson.core:jackson-databind')

    // Resilience4j for fault tolerance
    implementation('io.github.resilience4j:resilience4j-spring-boot3')

    // SLF4J for logging
    implementation('org.slf4j:slf4j-api')

    // Testing dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.mockito:mockito-core')

    // Test Lombok
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    runtimeClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    archiveBaseName = 'quickstart-helloworld'
    archiveVersion = version
}
